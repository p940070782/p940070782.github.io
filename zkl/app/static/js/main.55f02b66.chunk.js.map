{"version":3,"sources":["scripts/views/index.js","App.js","serviceWorker.js","scripts/reducers/user.js","scripts/reducers/data.js","scripts/reducers/index.js","store.js","index.js","utils/lazyload.js","utils/axios.js","utils/index.js","scripts/actions/index.js","utils/history.js","scripts/index.js"],"names":["Guide","LazyLoad","Index","Layout","console","log","tab","location","hash","replace","localStorage","oldTab","newTab","history","this","props","className","path","exact","render","to","component","Component","childContextTypes","PropTypes","object","App","Boolean","window","hostname","match","defaultState","immutable","fromJS","token","mobile","pic","Map","count","word","banner","goodTypes","goodList","searchList","keywordList","reducers","combineReducers","user","state","action","type","obj","toJS","payload","data","set","get","GETBANNERASYNC","reverse","store","createStore","applyMiddleware","thunk","promise","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","loadingComponent","loader","loading","Loadable","axios","defaults","baseURL","headers","common","post","alert","failToast","msg","hide","fail","interceptors","request","use","config","sessionStorage","error","Promise","reject","response","setTimeout","info","code","alertInstance","text","onPress","style","push","close","showAlert","bus","EventEmitter","countAdd","getBannerAsync","a","url","params","res","result","changeTab","changeUserInfo","getGoodTypes","map","item","title","getGoodList","reverserGoodList","getSearchList","reverserSearchList","createHashHistory","MainRoute","basename","React"],"mappings":"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","file":"static/js/main.55f02b66.chunk.js","sourcesContent":["\r\nimport LazyLoad from \"&/lazyload\"\r\n// import {Guide} from \"./guide\"\r\n// import { Index } from \"./app\";\r\nconst Guide = LazyLoad(()=>import(\"./guide\"));\r\nconst Index = LazyLoad(()=>import(\"./app\"));\r\n\r\n\r\nimport { Route,Switch ,Redirect } from \"react-router-dom\" \r\n// 所有路由 配置   \r\n\r\n\r\nexport class Layout extends Component{\r\n    componentWillUpdate(){\r\n        console.log('udpate');\r\n        const tab = location.hash.replace(\"#/index/\",\"\");\r\n        console.log(tab);\r\n        localStorage.oldTab = localStorage.newTab;\r\n        localStorage.newTab = tab\r\n    }\r\n    getChildContext(){\r\n        return {\r\n            history:this.props.history\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={()=>( <Redirect to=\"/guide\" /> )} />\r\n                    <Route path=\"/guide\" component={Guide}/>\r\n                    <Route path=\"/index/\" component={Index}/>\r\n                    <Route path=\"/search\" component={LazyLoad(()=>import(\"./search\"))} />\r\n                    <Route path=\"/scan\" component={LazyLoad(()=>import(\"./scan\"))} />\r\n                    <Route path=\"/login\" component={LazyLoad(()=>import(\"./login\"))} />\r\n                    <Route path=\"/detail/:goodId\" component={LazyLoad(()=>import(\"./detail\"))} />\r\n                    <Route render={()=>(<Redirect  to=\"/index/home\"  />)}/>\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nimport PropTypes from \"prop-types\"\r\nLayout.childContextTypes =  {\r\n    history:PropTypes.object\r\n}","import React from 'react';\n\nimport './App.css';\n\nimport {MainRoute} from \"@/scripts\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n       <MainRoute></MainRoute>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n\r\nimport immutable from \"immutable\"\r\nconst defaultState = immutable.fromJS({\r\n    token:\"\",\r\n    mobile:\"\",\r\n    pic:\"\",\r\n})\r\n\r\nexport const user = (state = defaultState ,action)=>{\r\n    switch(action.type){\r\n\r\n\r\n        case \"changeUserInfo\":\r\n        const obj = state.toJS();\r\n        return immutable.fromJS({...obj,...action.payload});\r\n        break;\r\n\r\n\r\n        default:\r\n        return state;\r\n        break;\r\n    }\r\n}","import immutable from \"immutable\"\r\nimport { GETBANNERASYNC } from \"../actions\";\r\n\r\nconst defaultState = immutable.Map({\r\n    count:1234,\r\n    word:\"努力中秋,收获国庆,享受除夕\",\r\n    banner:[],\r\n    tab:\"home\",\r\n    goodTypes:[],\r\n    goodList:[],\r\n    searchList:[],\r\n    keywordList:[]\r\n})\r\n\r\nexport const data = (state = defaultState ,action)=>{\r\n    switch(action.type){\r\n        case \"countAdd\":\r\n        return state.set(\"count\",state.get(\"count\")+action.payload);\r\n        break;\r\n\r\n        case GETBANNERASYNC:\r\n        return state.set(\"banner\",action.payload);\r\n        break;\r\n\r\n        case \"changeTab\":\r\n        return state.set(\"tab\",action.payload);\r\n        break;\r\n\r\n        case \"getGoodTypes\":\r\n        return state.set(\"goodTypes\",action.payload)\r\n        break;\r\n\r\n        case \"getGoodList\":\r\n        return state.set(\"goodList\",action.payload)\r\n        break;\r\n\r\n        case \"reverserGoodList\":\r\n        // console.log(state.toJS().goodList.reverse())\r\n        // state.get(\"goodList\").reverse()\r\n        return state.set(\"goodList\",state.toJS().goodList.reverse())\r\n        break;\r\n\r\n        case \"getSearchList\":\r\n        return state.set(\"searchList\",action.payload)\r\n        break;\r\n\r\n        case \"reverserSearchList\":\r\n        return state.set(\"searchList\",state.toJS().searchList.reverse())\r\n        break;\r\n\r\n        default:\r\n        return state;\r\n        break;\r\n    }\r\n}","\r\n\r\n\r\nimport {combineReducers} from \"redux-immutable\";\r\nimport { user } from \"./user\";\r\nimport { data } from \"./data\";\r\n\r\nexport const reducers = combineReducers({\r\n    user:user,\r\n    data\r\n})","\r\n\r\n\r\n\r\nimport {createStore,applyMiddleware } from 'redux'\r\nimport { reducers } from './scripts/reducers';\r\n\r\nimport thunk from \"redux-thunk\"\r\nimport promise from \"redux-promise\"\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunk,promise));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport './index.css';\nimport \"./styles/index.scss\";\n\nimport {Provider} from \"react-redux\";\nimport store from \"./store\"\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>,\n document.getElementById('root'));\n\n \n\n// reudx\n// import  \"./redux\";\n// import \"./react-redux\";\n// import \"./immutable\"\n\nserviceWorker.unregister();\n","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\n\r\n//通用的过场组件\r\nconst loadingComponent =()=>{\r\n    return (\r\n        <div>loading</div>\r\n    ) \r\n}\r\n\r\n//过场组件默认采用通用的，若传入了loading，则采用传入的过场组件\r\nexport default (loader,loading = loadingComponent)=>{\r\n    return Loadable({\r\n        loader,   // 需要懒加载的组件 \r\n        loading\r\n    });\r\n}","\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\n// axios.defaults.baseURL = \"http://localhost:1906/\";  // 开发环境\r\n\r\naxios.defaults.baseURL = \"https://peng47.com:2906/\";  // 生产环境\r\n\r\nlet token = \"\";\r\naxios.defaults.headers.common['token'] = token;    // token \r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nimport {Toast,Modal } from \"antd-mobile\"\r\nimport {history} from \"&/history\"\r\n\r\nconst alert = Modal.alert;\r\nconst showAlert = () => {\r\n    const alertInstance = alert('登录提示', '你确定是否前往登陆', [\r\n      { text: '我就看看', onPress: () => console.log('游客访问'), style: 'default' },\r\n      { text: '马上登录', onPress: () => history.push(\"/login\") },\r\n    ]);\r\n    setTimeout(() => {\r\n      // 可以调用close方法以在外部close\r\n      console.log('auto close');\r\n      alertInstance.close();\r\n    }, 500000);\r\n};\r\n\r\nexport function loadingToast(msg) {\r\n    Toast.hide();\r\n    Toast.loading(msg, 1, () => {\r\n      console.log('Load complete !!!');\r\n    });\r\n}\r\n\r\nexport function failToast(msg) {\r\n    Toast.hide();\r\n    Toast.fail(msg, 1);\r\n}\r\n\r\nexport function showToast(msg) {\r\n    Toast.hide();\r\n    Toast.info(msg, 1);\r\n}\r\n\r\n// 拦截器配置    Interceptors \r\n// 发送请求之前 添加拦截器  \r\naxios.interceptors.request.use(function (config) {\r\n    // 发送之前做的事情 \r\n    loadingToast(\"请求中\");\r\n    config.headers['token'] =  sessionStorage.token;\r\n    console.log(config);\r\n\r\n    return config;\r\n}, function (error) {\r\n    // 发送失败 做的失败 \r\n    failToast(\"请求失败\")\r\n    return Promise.reject(error);\r\n});\r\n\r\n// 响应数据 的拦截器 \r\naxios.interceptors.response.use(function (response) {\r\n    // 成功接收到数据 \r\n    console.log(response);\r\n    setTimeout(()=>{\r\n        showToast(response.data.msg);\r\n        if(response.data.code==500){\r\n            showAlert();\r\n        }\r\n    },500)\r\n    return response;\r\n}, function (error) {\r\n    failToast(\"响应失败\");\r\n    // 无法接收到数据  \r\n    return Promise.reject(error);\r\n});\r\n\r\n\r\nexport  {axios};\r\n\r\n","\r\n\r\n\r\n\r\n// commonJS 规范  ES6 module\r\n// export default\r\n// export const  \r\n\r\n\r\n\r\n\r\nimport url from \"url\";\r\n\r\nexport function getQuery(search){\r\n    return url.parse(search,true).query;\r\n}\r\n\r\n\r\n\r\nexport {axios} from \"./axios\";\r\n\r\n\r\nimport EventEmitter  from \"events\";\r\n\r\nexport const bus = new EventEmitter();","\r\n\r\nimport {axios } from \"&\"\r\n\r\nexport function countAdd(payload){\r\n    return {\r\n        type:\"countAdd\",\r\n        payload\r\n    }\r\n}\r\n\r\n\r\nexport const GETBANNERASYNC = \"GETBANNERASYNC\"\r\nexport async function getBannerAsync({url,params}){\r\n    let res = await axios.get(url,{params});\r\n    return {\r\n        type:GETBANNERASYNC,\r\n        payload:res.data.result\r\n    }\r\n}\r\n\r\n\r\nexport function changeTab(payload){\r\n    return {\r\n        type:\"changeTab\",\r\n        payload\r\n    }\r\n}\r\n\r\n\r\nexport function changeUserInfo(payload){\r\n    return {\r\n        type:\"changeUserInfo\",\r\n        payload\r\n    }\r\n}\r\n\r\n\r\nexport async function getGoodTypes({url}){\r\n    const res = await axios.get(url);\r\n    const payload = res.data.result.map((item)=>{\r\n        item.title = item.text;\r\n        return item;\r\n    })\r\n    return {\r\n        type:\"getGoodTypes\",\r\n        payload\r\n    }\r\n}\r\n\r\nexport async function getGoodList({url}){\r\n    const res = await axios.get(url);\r\n    return {\r\n        type:\"getGoodList\",\r\n        payload:res.data.result\r\n    }\r\n}\r\n\r\nexport function reverserGoodList(){\r\n    return {\r\n        type:\"reverserGoodList\"\r\n    }\r\n}\r\n\r\n\r\nexport async function getSearchList({url,params}){\r\n    const res = await axios.get(url,{params});\r\n    return {\r\n        type:\"getSearchList\",\r\n        payload:res.data.result\r\n    }\r\n}\r\n\r\nexport function reverserSearchList(){\r\n    return {\r\n        type:\"reverserSearchList\"\r\n    }\r\n}\r\n","\r\nimport {createHashHistory,createBrowserHistory} from \"history\";\r\n\r\nexport const history = new createHashHistory();\r\n\r\n// export {history};","\r\n\r\n\r\n\r\n\r\nimport {HashRouter  as Hash, Route} from \"react-router-dom\" ;\r\n\r\nimport {Layout} from \"./views\";    \r\n\r\n\r\nexport class MainRoute extends React.Component{\r\n    render(){\r\n        return (\r\n            <Hash \r\n                basename=\"/\"\r\n            >   \r\n                <Route component={Layout}/>\r\n            </Hash>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}